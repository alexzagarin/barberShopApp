{"ast":null,"code":"var _jsxFileName = \"/Users/mariiakotienieva/Downloads/barbershopalex/client/src/components/BookingForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from '../axiosConfig';\n// import { useLocation, useNavigate } from 'react-router-dom';\n//\n// function BookingForm() {\n//     const location = useLocation();\n//     const navigate = useNavigate();\n//     const queryParams = new URLSearchParams(location.search);\n//     const serviceId = queryParams.get('serviceId');\n//\n//     const [bookingDetails, setBookingDetails] = useState({\n//         reservationDate: '',\n//         time: ''\n//     });\n//\n//     const handleChange = (event) => {\n//         setBookingDetails({ ...bookingDetails, [event.target.name]: event.target.value });\n//     };\n//\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         const fullDateTime = `${bookingDetails.reservationDate}T${bookingDetails.time}:00`; // Ensure correct date-time format\n//         try {\n//             await axios.post('/api/reservations', {\n//                 serviceId,\n//                 reservationDate: fullDateTime,\n//                 status: 'Booked'\n//             });\n//             navigate('/confirmation');\n//         } catch (error) {\n//             console.error('Error making reservation:', error.response.data);\n//         }\n//     };\n//\n//     return (\n//         <div className=\"booking-form\">\n//             <form onSubmit={handleSubmit}>\n//                 <div className=\"form-group\">\n//                     <label>Date</label>\n//                     <input type=\"date\" name=\"reservationDate\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Time</label>\n//                     <input type=\"time\" name=\"time\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <button type=\"submit\">Book</button>\n//             </form>\n//         </div>\n//     );\n// }\n//\n// export default BookingForm;\n\n// import React, { useState } from 'react';\n// import axios from '../axiosConfig';\n// import { useLocation, useNavigate } from 'react-router-dom';\n//\n// function BookingForm() {\n//     const location = useLocation();\n//     const navigate = useNavigate();\n//     const queryParams = new URLSearchParams(location.search);\n//     const serviceId = queryParams.get('serviceId'); // Ensure this is the correct format\n//     const customerId = localStorage.getItem('customerId'); // Ensure this is being set on login\n//\n//     // Temporary fix: Use dummy values for customerId and serviceId if not present\n//     const validCustomerId = customerId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n//     const validServiceId = serviceId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n//\n//     const [bookingDetails, setBookingDetails] = useState({\n//         reservationDate: '',\n//         time: ''\n//     });\n//\n//     const handleChange = (event) => {\n//         setBookingDetails({ ...bookingDetails, [event.target.name]: event.target.value });\n//     };\n//\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         const fullDateTime = `${bookingDetails.reservationDate}T${bookingDetails.time}:00`;\n//         try {\n//             await axios.post('/api/reservations', {\n//                 customerId: validCustomerId,\n//                 serviceId: validServiceId,\n//                 reservationDate: fullDateTime,\n//                 status: 'Booked'\n//             });\n//             navigate('/confirmation');\n//         } catch (error) {\n//             console.error('Error making reservation:', error.response?.data || error.message);\n//         }\n//     };\n//\n//     return (\n//         <div className=\"booking-form\">\n//             <form onSubmit={handleSubmit}>\n//                 <div className=\"form-group\">\n//                     <label>Date</label>\n//                     <input type=\"date\" name=\"reservationDate\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Time</label>\n//                     <input type=\"time\" name=\"time\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <button type=\"submit\">Book</button>\n//             </form>\n//         </div>\n//     );\n// }\n//\n// export default BookingForm;\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; // Ensure axios is imported correctly\nimport './BookingForm.css';\nimport { useLocation, useNavigate } from 'react-router-dom'; // Import useNavigate for redirection\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BookingForm() {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    reservationDate: '',\n    time: ''\n  });\n  const location = useLocation();\n  const navigate = useNavigate();\n  const queryParams = new URLSearchParams(location.search);\n  const serviceId = queryParams.get('serviceId'); // Ensure this is the correct format\n  const customerId = localStorage.getItem('customerId'); // Ensure this is being set on login\n\n  // Temporary fix: Use dummy values for customerId and serviceId if not present\n  const validCustomerId = customerId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n  const validServiceId = serviceId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n\n  const [bookingDetails, setBookingDetails] = useState({\n    reservationDate: '',\n    time: ''\n  });\n  const handleChange = event => {\n    setBookingDetails({\n      ...bookingDetails,\n      [event.target.name]: event.target.value\n    });\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const fullDateTime = `${bookingDetails.reservationDate}T${bookingDetails.time}:00`;\n    try {\n      await axios.post('/api/reservations', {\n        customerId: validCustomerId,\n        serviceId: validServiceId,\n        reservationDate: fullDateTime,\n        status: 'Booked'\n      });\n      navigate('/confirmation');\n    } catch (error) {\n      var _error$response;\n      console.error('Error making reservation:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking-form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"booking-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Reservation Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Enter your name\",\n        value: formData.name,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Enter your email\",\n        value: formData.email,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"tel\",\n        name: \"phone\",\n        placeholder: \"Enter your phone number\",\n        value: formData.phone,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"reservationDate\",\n        value: formData.reservationDate,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        name: \"time\",\n        value: formData.time,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => console.log('Canceling reservation'),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n}\n_s(BookingForm, \"7qZfQQho8O7V+t6MFjeHefQR5Vc=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = BookingForm;\nexport default BookingForm;\nvar _c;\n$RefreshReg$(_c, \"BookingForm\");","map":{"version":3,"names":["React","useState","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","BookingForm","_s","formData","setFormData","name","email","phone","reservationDate","time","location","navigate","queryParams","URLSearchParams","search","serviceId","get","customerId","localStorage","getItem","validCustomerId","validServiceId","bookingDetails","setBookingDetails","handleChange","event","target","value","handleSubmit","preventDefault","fullDateTime","post","status","error","_error$response","console","response","data","message","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","required","onClick","log","_c","$RefreshReg$"],"sources":["/Users/mariiakotienieva/Downloads/barbershopalex/client/src/components/BookingForm.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from '../axiosConfig';\n// import { useLocation, useNavigate } from 'react-router-dom';\n//\n// function BookingForm() {\n//     const location = useLocation();\n//     const navigate = useNavigate();\n//     const queryParams = new URLSearchParams(location.search);\n//     const serviceId = queryParams.get('serviceId');\n//\n//     const [bookingDetails, setBookingDetails] = useState({\n//         reservationDate: '',\n//         time: ''\n//     });\n//\n//     const handleChange = (event) => {\n//         setBookingDetails({ ...bookingDetails, [event.target.name]: event.target.value });\n//     };\n//\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         const fullDateTime = `${bookingDetails.reservationDate}T${bookingDetails.time}:00`; // Ensure correct date-time format\n//         try {\n//             await axios.post('/api/reservations', {\n//                 serviceId,\n//                 reservationDate: fullDateTime,\n//                 status: 'Booked'\n//             });\n//             navigate('/confirmation');\n//         } catch (error) {\n//             console.error('Error making reservation:', error.response.data);\n//         }\n//     };\n//\n//     return (\n//         <div className=\"booking-form\">\n//             <form onSubmit={handleSubmit}>\n//                 <div className=\"form-group\">\n//                     <label>Date</label>\n//                     <input type=\"date\" name=\"reservationDate\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Time</label>\n//                     <input type=\"time\" name=\"time\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <button type=\"submit\">Book</button>\n//             </form>\n//         </div>\n//     );\n// }\n//\n// export default BookingForm;\n\n// import React, { useState } from 'react';\n// import axios from '../axiosConfig';\n// import { useLocation, useNavigate } from 'react-router-dom';\n//\n// function BookingForm() {\n//     const location = useLocation();\n//     const navigate = useNavigate();\n//     const queryParams = new URLSearchParams(location.search);\n//     const serviceId = queryParams.get('serviceId'); // Ensure this is the correct format\n//     const customerId = localStorage.getItem('customerId'); // Ensure this is being set on login\n//\n//     // Temporary fix: Use dummy values for customerId and serviceId if not present\n//     const validCustomerId = customerId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n//     const validServiceId = serviceId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n//\n//     const [bookingDetails, setBookingDetails] = useState({\n//         reservationDate: '',\n//         time: ''\n//     });\n//\n//     const handleChange = (event) => {\n//         setBookingDetails({ ...bookingDetails, [event.target.name]: event.target.value });\n//     };\n//\n//     const handleSubmit = async (event) => {\n//         event.preventDefault();\n//         const fullDateTime = `${bookingDetails.reservationDate}T${bookingDetails.time}:00`;\n//         try {\n//             await axios.post('/api/reservations', {\n//                 customerId: validCustomerId,\n//                 serviceId: validServiceId,\n//                 reservationDate: fullDateTime,\n//                 status: 'Booked'\n//             });\n//             navigate('/confirmation');\n//         } catch (error) {\n//             console.error('Error making reservation:', error.response?.data || error.message);\n//         }\n//     };\n//\n//     return (\n//         <div className=\"booking-form\">\n//             <form onSubmit={handleSubmit}>\n//                 <div className=\"form-group\">\n//                     <label>Date</label>\n//                     <input type=\"date\" name=\"reservationDate\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <div className=\"form-group\">\n//                     <label>Time</label>\n//                     <input type=\"time\" name=\"time\" className=\"input-field\" onChange={handleChange} required />\n//                 </div>\n//                 <button type=\"submit\">Book</button>\n//             </form>\n//         </div>\n//     );\n// }\n//\n// export default BookingForm;\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; // Ensure axios is imported correctly\nimport './BookingForm.css';\nimport { useLocation, useNavigate } from 'react-router-dom'; // Import useNavigate for redirection\n\nfunction BookingForm() {\n    const [formData, setFormData] = useState({\n        name: '',\n        email: '',\n        phone: '',\n        reservationDate: '',\n        time: ''\n    });\n    const location = useLocation();\n    const navigate = useNavigate();\n    const queryParams = new URLSearchParams(location.search);\n    const serviceId = queryParams.get('serviceId'); // Ensure this is the correct format\n    const customerId = localStorage.getItem('customerId'); // Ensure this is being set on login\n\n    // Temporary fix: Use dummy values for customerId and serviceId if not present\n    const validCustomerId = customerId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n    const validServiceId = serviceId || '507f1f77bcf86cd799439011'; // Example valid ObjectId\n\n    const [bookingDetails, setBookingDetails] = useState({\n        reservationDate: '',\n        time: ''\n    });\n\n    const handleChange = (event) => {\n        setBookingDetails({ ...bookingDetails, [event.target.name]: event.target.value });\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const fullDateTime = `${bookingDetails.reservationDate}T${bookingDetails.time}:00`;\n        try {\n            await axios.post('/api/reservations', {\n                customerId: validCustomerId,\n                serviceId: validServiceId,\n                reservationDate: fullDateTime,\n                status: 'Booked'\n            });\n            navigate('/confirmation');\n        } catch (error) {\n            console.error('Error making reservation:', error.response?.data || error.message);\n        }\n    };\n\n    return (\n        <div className=\"booking-form-container\">\n            <form onSubmit={handleSubmit} className=\"booking-form\">\n                <h2>Reservation Form</h2>\n                <input type=\"text\" name=\"name\" placeholder=\"Enter your name\" value={formData.name} onChange={handleChange} required />\n                <input type=\"email\" name=\"email\" placeholder=\"Enter your email\" value={formData.email} onChange={handleChange} required />\n                <input type=\"tel\" name=\"phone\" placeholder=\"Enter your phone number\" value={formData.phone} onChange={handleChange} required />\n                <input type=\"date\" name=\"reservationDate\" value={formData.reservationDate} onChange={handleChange} required />\n                <input type=\"time\" name=\"time\" value={formData.time} onChange={handleChange} required />\n                <div className=\"form-buttons\">\n                    <button type=\"submit\">Submit</button>\n                    <button type=\"button\" onClick={() => console.log('Canceling reservation')}>Cancel</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default BookingForm;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}